name: Windows
permissions: {}

on:
  workflow_dispatch:
    inputs:
      developer_build:
        description: "Set to OFF for Release wheels"
        required: false
        default: "ON"

  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize] # Rebuild on new pushes to PR

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PIP_VER: "23.2.1"
  WHEEL_VER: "0.38.4"
  STOOLS_VER: "67.3.2"
  JEDI_VER: "0.17.2"  # https://github.com/ipython/ipython/issues/12740
  IDNA_VER: "2.8"  # https://github.com/psf/requests/issues/5710
  SRC_DIR: "D:\\a\\open3d\\open3d"
  BUILD_DIR: "C:\\Open3D\\build"
  NPROC: 2
  DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}

jobs:
  windows:
    permissions:
      contents: write  # upload
    runs-on: windows-2019
    strategy:
      fail-fast: false
      matrix:
        BUILD_SHARED_LIBS: [OFF]
        STATIC_RUNTIME: [ON]
        BUILD_CUDA_MODULE: [ON]
        CONFIG: [Release, Debug]
        exclude:
          - BUILD_SHARED_LIBS: ON
            STATIC_RUNTIME: ON
        include:
          - BUILD_CUDA_MODULE: ON
            CUDA_VERSION: 11.0.3
    env:
      BUILD_WEBRTC: ${{ ( matrix.BUILD_SHARED_LIBS == 'OFF' && matrix.STATIC_RUNTIME == 'ON' ) && 'ON' || 'OFF' }}

    steps:
      - name: Disk space used
        run: Get-PSDrive

      - name: Setup Windows SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 19041

      - name: Install CUDA
        if: ${{ matrix.BUILD_CUDA_MODULE == 'ON' }}
        run: |
          # Define variables
          $CUDA_VER_FULL = "${{ matrix.CUDA_VERSION }}"
          $CUDA_VER_ARR = $CUDA_VER_FULL.Split(".")
          $CUDA_VER = "$($CUDA_VER_ARR[0]).$($CUDA_VER_ARR[1])"
          $CUDA_VER_ID = "$($CUDA_VER_ARR[0])_$($CUDA_VER_ARR[1])"
          # Installer url
          if ( $CUDA_VER_ARR[0] -ge 11 ) {
            $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER_FULL/network_installers/cuda_$($CUDA_VER_FULL)_win10_network.exe"
          } else {
            $CUDA_URL = "http://developer.download.nvidia.com/compute/cuda/$CUDA_VER/Prod/network_installers/cuda_$($CUDA_VER_FULL)_win10_network.exe"
          }
          # Installer arguments
          $CUDA_INSTALL_ARGS = "-s"
          # Required packages
          $CUDA_PACKAGES = "nvcc", "visual_studio_integration", "cublas", "cublas_dev", "cudart", "cusolver", "cusolver_dev", "npp", "npp_dev"
          $CUDA_PACKAGES.ForEach({ $CUDA_INSTALL_ARGS += " $($_)_$($CUDA_VER)" })
          # Download and install CUDA
          echo "Downloading CUDA installer from $CUDA_URL"
          Invoke-WebRequest $CUDA_URL -OutFile cuda.exe
          echo "Installing CUDA..."
          Start-Process -Wait -FilePath .\cuda.exe -ArgumentList "$CUDA_INSTALL_ARGS"
          if ( !$? ) {
            exit 1
          }
          # Add CUDA environment variables.
          $CUDA_PATH = "C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v$CUDA_VER"
          echo "CUDA_PATH=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "CUDA_PATH_V$CUDA_VER_ID=$CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$CUDA_PATH\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Config
        # Move build directory to C: https://github.com/actions/virtual-environments/issues/1341
        run: |
          nvcc -V